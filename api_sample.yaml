openapi: 3.0.0
info:
  title: Jumbly Cleaning Management API
  version: 1.0.0
  description: API for managing cleaning operations across different user roles

servers:
  - url: https://api.jumbly.com/v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        user_id: 
          type: integer
        username: 
          type: string
        email: 
          type: string
        role_id: 
          type: integer
        status: 
          type: string
          enum: ['Active', 'Inactive']

    Client:
      type: object
      properties:
        client_id: 
          type: integer
        company_name: 
          type: string
        contact_person: 
          type: string
        email: 
          type: string
        phone: 
          type: string

    Project:
      type: object
      properties:
        project_id: 
          type: integer
        client_id: 
          type: integer
        project_name: 
          type: string
        start_date: 
          type: string
          format: date
        end_date: 
          type: string
          format: date
        status_id: 
          type: integer

    Task:
      type: object
      properties:
        task_id: 
          type: integer
        project_id: 
          type: integer
        task_name: 
          type: string
        task_description: 
          type: string
        assigned_to: 
          type: integer
        status_id: 
          type: integer
        priority_id: 
          type: integer
        due_date: 
          type: string
          format: date

    Issue:
      type: object
      properties:
        issue_id: 
          type: integer
        task_id: 
          type: integer
        issue_description: 
          type: string
        status: 
          type: string
          enum: ['Reported', 'Resolved']
        photo_attachment: 
          type: string

paths:
  # User Management
  /users:
    post:
      summary: Create new user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully

  /users/{userId}:
    put:
      summary: Update user details
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully

  # Client Management
  /clients:
    post:
      summary: Create new client
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Client created successfully

  /clients/{clientId}:
    put:
      summary: Update client details
      security:
        - bearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: Client updated successfully

  # Project Management
  /projects:
    post:
      summary: Create new project
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created successfully

  /projects/{projectId}:
    put:
      summary: Update project details
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully

  # Task Management
  /tasks:
    post:
      summary: Create new task
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully

  /tasks/{taskId}:
    put:
      summary: Update task details
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully

  # Issue Reporting
  /issues:
    post:
      summary: Report new issue
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '201':
          description: Issue reported successfully

  # Authentication
  /auth/login:
    post:
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  # Notifications
  /notifications:
    get:
      summary: Retrieve user notifications
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notification_id:
                      type: integer
                    message:
                      type: string
                    status:
                      type: string
                      enum: ['Read', 'Unread']